name: Docker Build & Test

on:
  push:
    branches:
      - main
      - feat/GEON-1496-Oppsett-av-testmilj√∏
  pull_request:
    branches:
      - main

jobs:
  test-docker:
    runs-on: ubuntu-latest

    env:
      DB_HOST: pgvector_container
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USER: asd
      DB_PASSWORD: asd
      AZURE_GPT_API_KEY: ${{ secrets.AZURE_GPT_API_KEY }}
      AZURE_GPT_ENDPOINT: ${{ secrets.AZURE_GPT_ENDPOINT }}
      AZURE_EMBEDDING_BASEURL: ${{ secrets.AZURE_EMBEDDING_BASEURL }}
      AZURE_EMBEDDING_API_KEY: ${{ secrets.AZURE_EMBEDDING_API_KEY }}
      AZURE_EMBEDDING_ENDPOINT: ${{ secrets.AZURE_EMBEDDING_ENDPOINT }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GEMINI_BASE_ENDPOINT: ${{ secrets.GEMINI_BASE_ENDPOINT }}
      GEMINI_FULL_ENDPOINT: ${{ secrets.GEMINI_FULL_ENDPOINT }}

    steps:
      - name: Sjekker ut koden
        uses: actions/checkout@v4

      - name: Installer WebSocket-klient (wscat)
        run: npm install -g wscat

      - name: List frontend files
        run: ls -l geonorge-app/

      - name: Bygger backend Docker-image
        run: |
          docker build -t geogpt-backend -f geonorge-server/Dockerfile .

      - name: Bygger frontend Docker-image
        run: |
          docker build -t geogpt-frontend -f geonorge-app/Dockerfile ./geonorge-app

      - name: Starter opp Docker Compose (test-milj√∏)
        run: |
          docker compose up -d
          echo "Venter p√• at databasen skal v√¶re klar..."
          for i in {1..10}; do
            docker exec pgvector_container pg_isready -U asd && break
            echo "Venter p√• database..."
            sleep 5
          done

      - name: Vent p√• at backend WebSocket skal svare
        run: |
          echo "Venter p√• WebSocket-server..."
          for i in {1..10}; do
            nc -zv localhost 8080 && echo "WebSocket-serveren er oppe!" && break
            echo "WebSocket ikke klar enn√•..."
            sleep 5
          done || { echo "WebSocket-server feilet!"; exit 1; }

      - name: Sjekk backend-logger
        run: docker logs $(docker ps --filter "name=geogpt-backend" -q)

      - name: Sjekk databasevariabler
        run: docker exec $(docker ps --filter "name=geogpt-backend" -q) env | grep DB

      - name: Test databaseforbindelse
        run: |
          export PGPASSWORD=${{ secrets.DB_PASSWORD }}
          docker exec $(docker ps --filter "name=geogpt-backend" -q) psql -h pgvector_container -U $DB_USER -d $DB_NAME -c "SELECT 1;"

      - name: Vent p√• at backend skript skal kj√∏re
        run: |
          echo "‚è≥ Venter p√• at backend-skript fullf√∏res..."
          sleep 10

      - name: Hent backend-loggfiler for debugging
        run: |
          echo "üîç Henter backend-loggfiler..."
          docker exec $(docker ps -a --filter "name=geogpt-backend" -q) cat /app/scripts/create_vector.log || echo "‚ùå Ingen create_vector.log funnet!"
          docker exec $(docker ps -a --filter "name=geogpt-backend" -q) cat /app/scripts/insert_csv.log || echo "‚ùå Ingen insert_csv.log funnet!"
          docker exec $(docker ps -a --filter "name=geogpt-backend" -q) cat /app/scripts/server.log || echo "‚ùå Ingen server.log funnet!"

      - name: Sjekk feilmeldinger fra create_vector.py
        run: |
          echo "üîç Innhold av create_vector.log (med feil)"
          docker exec $(docker ps --filter "name=geogpt-backend" -q) cat /app/scripts/create_vector.log || echo "‚ùå Ingen logg funnet!"      

      - name: Tester om frontend svarer
        run: curl --retry 5 --retry-delay 5 --retry-connrefused --fail http://localhost:3000 || exit 1

      - name: Stopper og rydder opp
        run: docker compose down