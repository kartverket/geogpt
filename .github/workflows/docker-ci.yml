name: Docker Build & Test

on:
  push:
    branches:
      - main
      - feat/GEON-1496-Oppsett-av-testmilj√∏
  pull_request:
    branches:
      - main

jobs:
  test-docker:
    runs-on: ubuntu-latest

    env:
      DB_HOST: pgvector_container
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      AZURE_GPT_API_KEY: ${{ secrets.AZURE_GPT_API_KEY }}
      AZURE_GPT_ENDPOINT: ${{ secrets.AZURE_GPT_ENDPOINT }}
      AZURE_EMBEDDING_API_KEY: ${{ secrets.AZURE_EMBEDDING_API_KEY }}
      AZURE_EMBEDDING_BASEURL: ${{ secrets.AZURE_EMBEDDING_BASEURL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GEMINI_BASE_ENDPOINT: ${{ secrets.GEMINI_BASE_ENDPOINT }}
      GEMINI_FULL_ENDPOINT: ${{ secrets.GEMINI_FULL_ENDPOINT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install WebSocket client (wscat)
        run: npm install -g wscat

      - name: Build backend Docker image
        run: |
          docker build -t geogpt-backend -f geonorge-server/Dockerfile .

      - name: Build frontend Docker image
        run: |
          docker build -t geogpt-frontend -f geonorge-app/Dockerfile ./geonorge-app

      - name: Start Docker Compose (test environment)
        run: |
          docker compose up -d
          echo "Waiting for database to be ready..."
          for i in {1..10}; do
            docker exec pgvector_container pg_isready -U asd && break
            echo "Waiting for database..."
            sleep 5
          done

      - name: Wait for backend WebSocket response
        run: |
          echo "Waiting for WebSocket server..."
          for i in {1..10}; do
            nc -zv localhost 8080 && echo "WebSocket server is up!" && break
            echo "WebSocket not ready yet..."
            sleep 5
          done || { echo "WebSocket server failed!"; exit 1; }

      - name: Check backend logs
        run: docker logs $(docker ps --filter "name=geogpt-backend" -q)

      - name: Check database environment variables in backend container
        run: docker exec $(docker ps --filter "name=geogpt-backend" -q) env | grep DB

      - name: Test database connection
        run: |
          echo "üîç Testing database connection..."
          export PGPASSWORD=${{ secrets.DB_PASSWORD }}
          docker exec -e PGPASSWORD=$PGPASSWORD $(docker ps --filter "name=geogpt-backend" -q) \
            psql -h pgvector_container -U ${{ secrets.DB_USER }} -d ${{ secrets.DB_NAME }} -c "SELECT 1;"

      - name: Wait for backend scripts to complete
        run: |
          echo "‚è≥ Waiting for backend scripts to complete..."
          sleep 10

      - name: Retrieve backend logs for debugging
        run: |
          echo "üîç Fetching backend logs..."
          docker exec $(docker ps -a --filter "name=geogpt-backend" -q) cat /app/scripts/create_vector.log || echo "‚ùå create_vector.log not found!"
          docker exec $(docker ps -a --filter "name=geogpt-backend" -q) cat /app/scripts/insert_csv.log || echo "‚ùå insert_csv.log not found!"
          docker exec $(docker ps -a --filter "name=geogpt-backend" -q) cat /app/scripts/server.log || echo "‚ùå server.log not found!"

      - name: Check error messages from create_vector.py
        run: |
          echo "üîç Contents of create_vector.log (with errors)"
          docker exec $(docker ps --filter "name=geogpt-backend" -q) cat /app/scripts/create_vector.log || echo "‚ùå Log not found!"

      - name: Test if frontend responds
        run: curl --retry 5 --retry-delay 5 --retry-connrefused --fail http://localhost:3000 || exit 1

      - name: Stop and clean up
        run: docker compose down