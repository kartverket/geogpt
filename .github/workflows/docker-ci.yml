name: Docker Build & Test

on:
  push:
    branches:
      - main
      - feat/GEON-1496-Oppsett-av-testmiljø
  pull_request:
    branches:
      - main

jobs:
  test-docker:
    runs-on: ubuntu-latest

    steps:
      - name: Sjekker ut koden
        uses: actions/checkout@v4

      - name: Ekstraher miljøvariabler fra GitHub Secrets
        run: |
          echo "${{ secrets.ENV }}" > .env
          cat .env | while IFS= read -r line; do
            echo "$line" >> $GITHUB_ENV
          done

      - name: Installer WebSocket-klient (wscat)
        run: npm install -g wscat

      - name: List frontend files
        run: ls -l geonorge-app/

      - name: Bygger backend Docker-image
        run: docker build -t geogpt-backend -f geonorge-server/Dockerfile .

      - name: Bygger frontend Docker-image
        run: docker build -t geogpt-frontend -f geonorge-app/Dockerfile ./geonorge-app

      - name: Starter opp Docker Compose (test-miljø)
        run: |
          docker compose up -d
          echo "Venter på at databasen skal være klar..."
          for i in {1..10}; do
            docker exec pgvector_container pg_isready -U $DB_USER && break
            echo "Venter på database..."
            sleep 5
          done

      - name: Vent på at backend WebSocket skal svare
        run: |
          echo "Venter på WebSocket-server..."
          for i in {1..10}; do
            nc -zv localhost 8080 && echo "WebSocket-serveren er oppe!" && break
            echo "WebSocket ikke klar ennå..."
            sleep 5
          done || { echo "WebSocket-server feilet!"; exit 1; }

      - name: Sjekk backend-logger
        run: docker logs $(docker ps --filter "name=geogpt-backend" -q)

      - name: Test databaseforbindelse
        run: |
          export DB_USER=$(grep DB_USER .env | cut -d '=' -f2)
          export DB_NAME=$(grep DB_NAME .env | cut -d '=' -f2)
          export DB_PASSWORD=$(grep DB_PASSWORD .env | cut -d '=' -f2)
          docker exec -e PGPASSWORD=$DB_PASSWORD pgvector_container psql -h pgvector_container -U $DB_USER -d $DB_NAME -c "SELECT 1;"

      - name: Tester om frontend svarer
        run: curl --retry 5 --retry-delay 5 --retry-connrefused --fail http://localhost:3000 || exit 1

      - name: Stopper og rydder opp
        run: docker compose down
