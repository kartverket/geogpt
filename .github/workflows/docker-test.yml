---
name: Docker Application Test

on:
  push:
    branches:
      - 'test-actions'
      - main
  pull_request:
    branches:
      - 'test-actions'
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: asd
      DB_USER: asd
      DB_PASSWORD: asd
      AZURE_GPT_API_KEY: ${{ secrets.AZURE_GPT_API_KEY }}
      AZURE_GPT_ENDPOINT: ${{ secrets.AZURE_GPT_ENDPOINT }}
      AZURE_EMBEDDING_API_KEY: ${{ secrets.AZURE_EMBEDDING_API_KEY }}
      AZURE_EMBEDDING_ENDPOINT: ${{ secrets.AZURE_EMBEDDING_ENDPOINT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
          docker compose version

      - name: Create .env file
        run: |
          echo "DB_HOST=database" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_NAME=asd" >> .env
          echo "DB_USER=asd" >> .env
          echo "DB_PASSWORD=asd" >> .env
          echo "AZURE_GPT_API_KEY=${{ secrets.AZURE_GPT_API_KEY }}" >> .env
          echo "AZURE_GPT_ENDPOINT=${{ secrets.AZURE_GPT_ENDPOINT }}" >> .env
          echo "AZURE_EMBEDDING_API_KEY=${{ secrets.AZURE_EMBEDDING_API_KEY }}" >> .env
          echo "AZURE_EMBEDDING_ENDPOINT=${{ secrets.AZURE_EMBEDDING_ENDPOINT }}" >> .env

      - name: Build and start containers
        run: |
          docker compose up -d
          # Wait for services to be ready
          sleep 30

      - name: Check running containers
        run: docker compose ps

      - name: Check database connection
        run: |
          docker compose exec -T database pg_isready -U asd

      - name: Verify backend service
        run: |
          # Wait for backend to be ready
          timeout 300 bash -c 'until curl -s http://localhost:8080 > /dev/null || true; 
          do sleep 5; done'
          # Check if backend logs indicate success
          docker compose logs backend | grep -E "WebSocket server running|Processing completed"

      - name: Verify frontend service
        run: |
          # Check if frontend is responding
          timeout 300 bash -c 'until curl -s http://localhost:3000 > /dev/null || true; 
          do sleep 5; done'

      - name: Show logs on failure
        if: failure()
        run: docker compose logs

      - name: Clean up
        if: always()
        run: docker compose down